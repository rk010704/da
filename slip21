Html file

<!DOCTYPE html>
<html>
   <head>
      <title>Number Check</title>
      <script src=”<?php echo base_url(‘js/numberCheck.js’); ?>”></script>
   </head>
   <body>
      <h1>Number Check</h1>
      <p>Enter a number to check:</p>
      <input type=”number” id=”num” />
      <button onclick=”checkNumber(document.getElementById(‘num’).value)”>Check</button>
   </body>
</html>

Create is file check number.js

Function checkNumber(num) {
   If (num > 0) {
      Alert(“The number is positive.”);
   } else if (num < 0) {
      Alert(“The number is negative.”);
   } else {
      Alert(“The number is zero.”);
   }
}





Import pandas as pd
From sklearn.model_selection import train_test_split
From sklearn.linear_model import LinearRegression
From sklearn.metrics import mean_squared_error, r2_score
Import matplotlib.pyplot as plt

# 1. Collect data
Data = pd.read_csv(‘user_data.csv’)

# 2. Preprocess data
Data.dropna(inplace=True)
X = data[‘age’].values.reshape(-1, 1)
Y = data[‘income’].values.reshape(-1, 1)

# 3. Split data
X_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# 4. Train the model
Regressor = LinearRegression()
Regressor.fit(x_train, y_train)

# 5. Predict values
Y_pred = regressor.predict(x_test)

# 6. Evaluate model
Mse = mean_squared_error(y_test, y_pred)
R2 = r2_score(y_test, y_pred)
Print(“Mean squared error: “, mse)
Print(“R-squared: “, r2)

# 7. Visualize results
Plt.scatter(x_test, y_test, color=’gray’)
Plt.plot(x_test, y_pred, color=’red’, linewidth=2)
Plt.show()
