Html file
<<!DOCTYPE html>
<html>
<head>
	<title>Contact List</title>
	<script src=https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js></script>
	<script src=”script.js”></script>
</head>
<body>
	<button id=”printBtn”>Print Contacts</button>
	<br><br>
	<table id=”contactTable”>
		<thead>
			<tr>
				<th>Sr. No.</th>
				<th>Name</th>
				<th>Residence Number</th>
				<th>Mobile Number</th>
				<th>Address</th>
			</tr>
		</thead>
		<tbody>
			<!—Contact list will be displayed here 
		</tbody>
	</table>
</body>
</html>


Ajax file

$(document).ready(function() {
	// Event listener for print button
	$(“#printBtn”).click(function() {
		// AJAX request to read contact.dat file
		$.ajax({
			url: “contact.dat”,
			dataType: “text”,
			success: function(data) {
				// Split the file contents into lines
				Var lines = data.split(“\n”);

				// Iterate over each line and create a table row
				Var tableRows = “”;
				For (var i = 0; i < lines.length; i++) {
					Var columns = lines[i].split(“,”);
					If (columns.length == 5) { // Only process valid rows
						tableRows += “<tr>”;
						for (var j = 0; j < columns.length; j++) {
							tableRows += “<td>” + columns[j] + “</td>”;
						}
						tableRows += “</tr>”;
					}
				}

				// Add the table rows to the table body
				$(“#contactTable tbody”).html(tableRows);
			},
			Error: function(jqXHR, textStatus, errorThrown) {
				Alert(“Error: “ + errorThrown);
			}
		});
	});
});






Import numpy as np
Import pandas as pd
From sklearn.linear_model import LinearRegression
From sklearn.model_selection import train_test_split

# Create a random dataset with 10 samples
Heights = np.random.normal(170, 10, 10)
Weights = np.random.normal(70, 5, 10)

# Combine the two arrays into a single dataset
Dataset = pd.DataFrame({‘Height’: heights, ‘Weight’: weights})

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(dataset[‘Height’], dataset[‘Weight’], test_size=0.2, random_state=42)

# Create a Linear Regression model and fit it to the training data
Lr_model = LinearRegression()
Lr_model.fit(X_train.values.reshape(-1, 1), y_train)

# Print the model coefficients
Print(‘Model Coefficients:’, lr_model.coef_)

# Predict the weights for the test data and print the predictions
Y_pred = lr_model.predict(X_test.values.reshape(-1, 1))
Print(‘Predictions:’, y_pred)
